off - 0  ;on - 1           ----Ascii/Unicode---------- 


s.l :- design a website

p.l  :- devlope a software

									computer languges 
									
scripting languges															programming languges
						
html,css,js,bootstrap ,....					(procedure oreinted programming)pop				oop
												basic,python,.....						java,.net,c++,lisp........
												
												
	security  :- Encapsulation,Abstraction

	performance :-Inheritace ,Polymorphism
	
	
	java :-
	
	
	(1)platform independency
	
	
	(2)Garbage Collector:-
	
	history :-
	=======
	
	sunmicro system 
	
	greentalk(.gt)-------------------->oak --------------->java(.java)
	
	jdk 1.0------------------------------------------------>jdk 22[8,11,17,21]
	
	cmd>
	java --version
	
	
	3 editions:-
	
	jse/j2se:-standalone [no client-server ]				core java
	
	jee/j2ee:-distributed [client-server] ,web app     		 adv java
	
	jme /j2me:-mobile app's										minute details java
	
	
	james gosling
	
	
	26 alphabets
	
	
		variables:-
		=========
		
		syntax :-
		
				datatype varname;			//declaration 
				
				datatype varname = value;   //initialization
				
				
		local variable(within the method body)		global variables(outside the method body)
		
													static					instance
													
													
	syntax:-
	========
	
	static - 		static	datatype varname = value;
	
	instance -      datatype varname = value;
	
	memory allocation :-
	==================
	
	static -static prop's(var,method,constr) will gets the memory space only once when the class
							loads  into the jvm
	
	instance - instance prop's will gets the memory space for every object creation.
					
					classname objname = new classname();  //object creation.
					
	
	access:-
	=======
	
	static :- Static prop's can be accessed by the class reference
	
	instance - Instatnce prop's can accessed by the object reference
	
	in memory:-
	==========
	
	static - method area 
	
	instace - heap area
	
	
	usage:-
	======
	
	static - to store common data.
	
	instance - to store unique data.
	
	
	
	Operators :-
	
	a + b
	
	
	ULTRA AB
	
	Unary Operators
	
	Logical Operators
	
	Terinary Operators
	
	Relational Operators
	
	Assignment Operators
	
	Arithmetic Operators
	
	Bitwise Operators
	
	ide shortcuts :-'
	
	ctrl + space :- suggestions
	
	ctrl + / :- comments
	
	ctrl +shift +/ :- multiline comments
	
	methods:-A group of statements altogether perfroms a single task
	========
	
	syntax/singnature :-
	
			accessmodifier returntype methodname(params....){
			
					//body
			}
	
	(1)static method:-
	------------------
	
	syntax:-
	
		accessmodifier static returntype methodname(params....){
			
					//body
			}
	
	(2)Dynamic method:-
	--------------------
	
	syntax/singnature :-
	
			accessmodifier returntype methodname(params....){
			
					//body
			}
		
		
		class = var's + method's 
		
		class = class member's + member functions
		
		classname objectname = new classname(); 
		
		
		Inheritace:-Accquring parent class properties to the child class.
		===========	
		
						*code resuability
		
		extends							implements
		
		class --->class					interface--->class
		
		
		class A{
		100 METHODS
		}
		class B parent A{
		20 methods + 100 mthod = 120 methods
		}
		
		
		* MI is not supported in java @class level
		
		*MI is supported in java @interface level
		
		
		
		class A{							class B{
		add(int a,int b){					add(int a,int b){
		
		(a*b);	}}							(a+b);}}
		
		
		
		
		class C extends A,B{
		
		obj.add(4,3);		//
		
		}
		
		
		based method body :- 2 types
		
		
		(1)concrete method :-the method with method body
		
		syntax:-
				accessmodifier returntype methodname(params..){
				
				//body
				
				}
		
		(2)abstract method :-the method with out method body
		
		
		syntax:- 
		
				accessmodifier returntype methodname(parms..);
				
				
				
		class :- it's the only collection of concrete methods
		
		abstract class :- it is the combination of both concrete + abstract methods
		
		interface :- it's the only collection of abstract methods
		
		
		
		Abstraction:-It is to hide the data
		-----------
		* security
		
		
		interface 100%			abstract class 0-100%     class 0%
		
		
		ploymorphism:-
		------------
		
		(1)methodoverloading :- (method signature)
		
								method name is same but having diff parameters.
									(a)type:- of params..
									(b)order:-of params..
									(c)no:of params..
		
		(2)methodoverriding :-(method body)
		
								method name is same but having diff method body
								
								
		class Parent{
		
		1000Cr.()
		
		marriage(){
		Kajol;
		}
		
		100methos()
		}
		
		class Child extends Parent{
		
		@Override
		marriage(){
		deepika;
		}
		
		}
		
		Encapsulation:-wraps the data into a single entity/class
		-------------
		
		accessmodifiers:- 
		
		constructor:-To initialize the objects
		-----------
		classname objname = new Classname();
		
		syntax :-  	
					accessmodifier  classname(){		------>default costructor
					//body
					}
		
		syntax:-
					accessmodifier classname(parms.....){ ----->parametrized constr
					
					/body
					}
		
		NOTE :-Constructor call must be the first statement in a constructor
		
		NOTE :- constructor will not have return type
		
		*The parent file for every java file is "java.lang.Object"
		
		*The default package for every java file is "java.lang.*"
		
		
		
		coustmized exceptions :-
		
				1.The class must be the child class for parent Exception class
				
		
		
		
H.W:-		int age;
		
		age<18 ====>AgeNotValidException
		
		
		age>18 =====>you can go to vote
		
		
		
Array:-It is a collection similar dt elements. 

		(1)int arr[] = {3,7,54,4,2,2,4,56,6};
		
		(2)int[] arr = new int[10];
		
			arr[6] = 34;
		
		(3)int []arr = new int[]{4,6,3,5,7,8,8,5,2,6};
		
	limitations:-
	
	(1)It is fixed in size
	
	(2)It will allows only homogeneous elements
	
	(3)It will not have any utility methods.
	
	
	Collection framework :-
	====================
	
	
	Adv :-
	
	(1)It is growable in nature
	
	(2)It will allows both homogeneous/heterogeneous elements
	
	(3)It will have lots of utility methods.
	
	
	util ---->Comparator --->compare(a,b); ---->nso  // a-b =97-98=-1
	
	lang ---->Comparable ---->compareTo(a) ---->cso	//
	
	
	
	String :-
	======
	
	String var = "value";
	
	
		String 				StringBuffer			StringBuilder
	
	immutable				mutable					mutable
							sync					not sync
							
							
							
							
	filehandling :-java.io.*
	============	
		
		(1)To create a file  :- File
		
		(2)To write into a file :- FileWriter
								   BufferedWriter
								   PrintWriter
		
		(3)To read from a file :-  FileReader
								   BufferedReader
								   
								   
		
		Serialization :- The process of converting object data to byte data is called serialization.
		
		DeSerialization :- The process of convering byte data to object data is called deserialization.
		
		
		java 8:-
		======
		
		Interface :-  It's the collection of only abstract methods
		
		Marker Interface :-  0 methods (Serializable)
		
		Functional Interface :-  (sam) single abstract method
		
		
											Database:-
											========
apple	353
roses	453
tulips	342			
oranges	234											
					
Data :- Raw info of any real world entites

DataBase:- It is a storage where the data  is stored in an organised way and in a secured
											way for the future access.
				
					
		oracle db ----->rdbms dbms-------->tables=rows(records)+columns(fields)
		
		mysql --------->rdbms ------------->mysql
		
		SQL 
		---
		
		Query :- It is like a command .To perfrom any operation in the db we will write quires.
		
		5 types of quires:-
		
		DDL(Data Definition language):-create,alter,drop,truncate,rename	(auto-commited)

		DML(Data Manipulation Language):-insert,update,delete	(not auto-committed)
		
		DRL(Data Retrival language):- select
		
		DCL(Data Control language) :-grant
		
		TCL(Transaction control language) :-commit,rollback
		
		
		drop  :- deletes entire table along with the rows
		
		truncate :- deletes the data in the table but not the table
		
		delete :- custom deletions
		
		
		
		To create an user account in db:-
		
		cmd>
				conn /as sysdba
				
				create user username identified by password;
				
				grant connect, resource to username;
				
				conn username/password;
				
									
									
									jdbc:-(java database connectivity)
									====
		
		.java ---------> (translator)DRIVERS --------->database(query)
		
		5 steps :-
		
		(1)Loading driver classes
		
		(2)Creating the connection
		
		(3)create the statement
		
		(4)Executing the the quires

		(5)Closing the connection
		
		
		limitations:-
		
		(1)table should be created on our own
		
		(2)queires
		
		(3)same file for db prop's and  for the business logic
		
		(4)Exception Handling
		
		(5)Boiler Plate code(Repeated code)
		
		
		jpa(java persistence API):-[specifications-interface]
		-------------------------
		
		Advantages:-
		
		(1)No table creation 
		
		(2)No quires
		
		(3)No exception Handling
		
		(4)No boiler plate code
		
		(5)seperate files for db prop's and business logic
		
		ORM(Object Relational Mapping) Tools :- Implementation
		
		hibernate,ecllipselink,toplink....
		
		class -------->table
		
		variables ---->cloumn
		
		object ------->row
		
		*query equilvalent methods  [crud  -- > create ,retrive ,update ,delete]
		
		EntityManagerFactory-------->Persistence(.xml)
		
		EntityManager
		
		insert ----->persist()  
		
		update ----->merge()
		
		delete ----->remove()
		
		select ----->find()
		
		
		Build tool ---- maven
		
		
		junit :- testing a piece of code
		
		
		
						spring:-
						======
	
		def :- It is a non-invasive framework which is used to develop ligth weighted and 
					lossely coupled web applications.
		
				
				invasive :-it will forces the programmer to implement the predefined api
				
				non-invasive :-it will not forces the programmer to implement the predefined api
		
				
				heavy -weighted :-
				
				
				
	class A{
	
	
	1000 methods
	
	}

	class B extends A{
	
	500 methods
	}
	class C extends B{
	
	
	1 method +500 +1000   ---------------->1501
	}
	
				
				
				tightly coupled :-If the dependencies are very high 
				
				loosley coupled :-If the dependencies are very low
		
	spring core, spring boot, spring security,spring cloud ,spring rest,spring data jpa,.....  20+
			
	
	ejb (enterprise java beans)------------------>creating heavy weighted components
	
	
	spring  ------------------------------------->2003 spring 1.x

													spring 6.x	

		Rod johnson
			
	

SPRING CORE :-To avoid the dependencies b/n classes to make our application as a loosley coupled
===========					one.


			->we are not creating the objects.
			
			
			
	*Containers :- This containers will create the objects. 2 types:-
	
					(1)Application Context
					
					(2)Bean Factory
					
					
	*Dependecy Injection :- To inject the data inside an object.
	
				(1)setter Injection  -> <property></property>
				
				(2)Constructor Injection -> <constructor-arg></constructor-arg>
				
				(3)Autowire autowire  -> attribute
				
				
	*Configurations:-
				(1)Xml config
				
				(2)Annotation config.
				
				
				
Spring Boot:-
===========

Adv's:-
------	
		(1)Auto configuration
		(2)Embedded server(tomcat server  :8080)
		(3)starters  :- set of jar files
		(4)Actuators :-will provide the status/health of our app through end point urls
		
		
		
		spring mvc :-
		----------
		
		controller :- it will interact with the client through http urls
		
		Service :- it is the mediator b/n controller and dao
		
		Dao /Repository :- it will holds the jpa logic of our web app
		
		
		
		Spring Rest :-
		============

webservices:-To create interaction b/n two interoperable applications
-----------

		soap :-It only supports xml format(simple object acess program)
		
		rest :-It supoorts xml,json,php,html,js.......(respresentational state transfer)
		
		
		spring security:-
		===============
		
		we can insist security to the rest apis.
		
								
								Frontend:-
								=========
	
	website :- collection of webpages.3 types of webpages:-
	
				(1)static webpages:- where the changes will not happes regularly
				
				(2)Dynamic webpages:- the changes will happens regularly
				
				(3)server webpages:-data from static and dynamic webpages will get stored here.
	
	
	HTML :- hyper text markup language	--1995
	
			tag:-   <predefinedword>
			
			2 types :-
			
			(1)container/pair tag :-<html></html>
			
			(2)empty/single tag:-<br> or </br> or <br/>
			
			html,head,body
			
			
			
			
		<body  class="values"> statements </body>   ====>elements
		
		Text Fromat tags:-
		
		<b></b>
		<i></i>
		<u></u>
		<strike></strike>
		<sub> </sub>
		<sup></sup>
		
		(Numbering and bullets)List :-<li></li>
		
				2 types :-
				(1)unordered list :-<ul></ul>
				
				(2)ordered list:-<ol></ol>
				
		link tags:-

(1)text linking tags

(2)img linking tag		

block tags :-

inline tags:-

								css
								===
								
	3 ways to inject the stylings into the html doc:
	
		(1)External :-cascading external style sheet to the html doc [link tag]
		
		(2)Internal :-inside the html doc in the head tag[style]
		
		(3)Inline   :-inside html elements opening tag [style attribute]
		
		
		css :-
		
		(1)color name :- red ,olive,silver
		
		(2)HexaDecimal  :- #rgb(00-ff)
		
		(3)rgb function  :-rgb(red,green,blue)(0-255)
		
		(4)rgb with alpha :-rgb(red,green,blue,ap[0.0-1.0])
		
		(5)hsl 			:-hsl(hue(0-360) ,saturation(0-100%),luminousity(0-100%))
		
		(6)hsl with alpha  :-hsl(hue(0-360) ,saturation(0-100%),luminousity(0-100%),alpha)
		
		
		selectors :-selectors are used to call the tags.
		
		(1)Tag name  h1,body,h2,p
		
		(2)id name (#) 
		
		(3)calss name( .)
		
		(4)Universal selector (*)    ----->to call all the tags 
		
		
								javascript:-
								===========
		(1)To desing dynamic webpages.
		
		(2)To change the html content
		
		(3)To change the html attributes.
		
		(4)To change in css
		
		(5)To hide the data
		
		
		To inject the js logic into html , we should use <script> tag.2 ways
		
		(1)Internal usage
		
		(2)External usage
		
		
		
		
		outputs in java :-
		
		
		innerHTML   :- based on the id ,contenct will be displayed on the webpage(getElementById("id"))
		
		document.write("text") ----Id not required
		
		window.alert("text") ----alert box will be displayed with the given text
		
		cosole.log("text")
		
		
		
		datatype varname = value;
		
		
		var a= 8763485
		
		
		datatypes :-  
		
					number,string,boolean,object,undefined.
					
					
		functions :- 
		
		      (1)predfined functions
			  (2)user defined functions
			  
			  function funname(params....){-
			  ///body return;
			  }
			  
			  
								bootstrap:-
								=========
								
		(1)Through cdn(content delivery network)

		(2)Trough dowloading bootstrap files	
					